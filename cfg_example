# Example of configuration file.
#

#-------------------
# Name of backup, single word.
#-------------------

$cfg_backup_name = "test_host";


#-------------------
# Path of internal cache directory for local backup method or temporary hashes for other methods..
#-------------------

$cfg_cache_dir = "/usr/local/fsbackup/cache";


#-------------------
# Full path of some external program running from C<fsbackup.pl>.
# $prog_gzip = "" - not use compression, $prog_pgp = "" - not use encryption.
# Paths to the programs to be launched during the backup process. 
# It is recommended not to be lazy and write the full path to each program.
# Attention ! When using gpg encryption, it is recommended to
# set $prog_gzip="", because gpg compresses data before encryption.
# Using gzip will result in double compression and unnecessary CPU load.
#-------------------

$prog_md5sum = "md5sum -b";
$prog_tar	 = "tar";
$prog_ssh	 = "ssh";
$prog_rm	 = "rm";
$prog_gzip	 = "gzip"; # If equal to "", then don't use compression.
$prog_pgp	 = "gpg";  # If equal to "", do not apply encryption.


#-------------------
# Checksum method:
#	timesize - checksum of file attributes (default, best speed)
#	md5      - checksum of file attributes + MD5 checksum of file content.
# Checksum calculation method for determining changes in a file.
#   timesize - takes into account the time of the last modification of the file, its size,
#       file attributes, but not the contents. As a rule of thumb
#       taking these factors into account is usually enough to determine whether
#       to update the file in the backup. The fastest method.
#   md5 - all timesize parameters + checksum of contents
#       of the file. The most resource-intensive and slowest method.
#-------------------

$cfg_checksum = "timesize";


#-------------------
# Backup style:
#	backup	    - incremental backup (copy only new and changed files).
#	full_backup - full backup (copy all files).
#	sync	    - file tree synchronization (only for ssh or local storage type).
#	hash	    - hash creation without storing archive (spying for new or changed files, without physically moving).
#-------------------

$cfg_backup_style = "backup";


#-------------------
# Incremental level (after how many incremental copy make full refresh of backup)
# Number of backup copies, in case of incremental backup, after which a full backup is performed
# Full backup. For example, at = 7 - 6 times only changes will be placed,
# for 7 times the backup will be merged into one file. 0 - as many times as you like.
#-------------------

$cfg_increment_level = 7;


#-------------------
# Save previous backup to OLD directory before rotation or before storing
# full backup.
# 0 - don't save old backup
# 1 - save old backup.
# Saving the previous version of the full backup before incremental rotation or
# Replacing the current non-incremental backup with a new version.
# The old version is placed in the OLD subdirectory.
# 0 - do not save the previous version.
# 1 - keep the previous version
#-------------------

$cfg_save_old_backup = 1;


#-------------------
# Type of backup storage:
#	local	    - store backup on local file system.
#	remote_ssh  - store backup on remote host over SSH connection.
#	remote_ftp  - store backup on remote FTP server.
#	remote_ftps - store backup on remote FTPS server.
#-------------------

$cfg_type = "local";


#-------------------
# Connection parameters for remote_ssh storage type.
# Parameters required to copy the backup via ssh and ftp:
#-------------------

$cfg_remote_host = "backup-server.test.com";
$cfg_remote_login = "backup_login";
$cfg_remote_path = "/home/backup_login/backup";

#-------------------
# FTP transfer mode. If set to a non-zero value then all data transfers will
# be done using passive mode. This is not usually required except for some dumb
# servers, and some firewall configurations.
# Connection mode with FTP server (passive or active).
# 0 - Active mode.
# 1 - Passive mode (for specific ftp servers or special firewall settings).
#-------------------

$cfg_remote_ftp_mode = 0;

#-------------------
# Password of remote login for remote_ftp storage type.
#-------------------

$cfg_remote_password = "Test1234";


#-------------------
# Path of directory to store backup on local file system for local storage type.
# Parameters required to store the backup on the local FS:
# The backup should not be in the same directory as the cache. Create a separate directory,
# for example, archive.
#-------------------

$cfg_local_path = "/usr/local/fsbackup/archive";


#-------------------
# Limit of file creation time in days.
# If not 0, don't backup files created or modified later then $cfg_time_limit days.
# Time in days, files created before which will not be placed in the backup.
# 0 - put all files regardless of the time of their creation.
#-------------------

$cfg_time_limit = 0;


#-------------------
# Limit of maximum file size.
# If not 0, don't backup files witch size more then $cfg_time_limit kilobytes.
# Maximum allowable file size in Kb to be placed in the backup.
# 0 - put all files regardless of their size.
#-------------------

$cfg_size_limit = 0;

#-------------------
# Size of maximum size (in KiloBytes) of single unpacked archive file (volume).
# 0 - unlimited file size.
# The maximum size (in Kb) of an uncompressed backup archive placed in a single
# file, i.e. volume size. Useful when creating gigantic archives that do not fit into the file system's limits
# into file system limitations or when writing archives to small drives.
# If the specified size is exceeded, writing is continued to the next file c
# identifier '-2', '-3', etc.
# 0 - archive size is not limited.
#-------------------

$cfg_maximum_archive_size = 0;


#-------------------
# Root path for initial chdir.
# Root directory relative to which files are placed in the backup 
# and relative to which paths for placing files are described.
#-------------------

$cfg_root_path = "/";


#-------------------
# Name of user in public key ring with public key will be used for PGP encryption.
# Not use encryption if not set.
# Encrypt the backup using PGP.
# If the field is not filled in, pgp is not applied.
# Otherwise, the field contains the UserId of the record in the public key ring.
#-------------------

# $cfg_pgp_userid = "backup";


#-------------------
# Verbose level.
#	0	- Silent mode, suspend all output, except fatal configuration
#		  errors.
#	1	- Output errors and warnings.
#	2	- Output all the  available  data.
#-------------------

$cfg_verbose = 2;

#-------------------
# Recursive review of the prohibited directories.
#	0	- Recursively to view all contents of directories marked for
#		  backup, including contents of directories prohibited by
#		  '!', '!d' and '=! rules.
#	1	- not use a recursive entrance to directory prohibited for
#                 backup (speed is increased, reduces flexibility of customization).
#-------------------

$cfg_stopdir_prune=0;

1;
#-------------------
# List of backuped path and regexp mask.
#  /dir[/file] - backup file or directory.
#  !/dir[/file] - NOT include this file or directory to backup.
#  # - ignore this line.
# Mask:
#  =~ - regexp mask for include file or directory to backup.
#  f~ - regexp file mask for include file to backup.
#  d~ - regexp directory mask for include directory to backup.
#  =! - regexp mask for NOT include file or directory to backup.
#  f! - regexp file mask for NOT include file to backup.
#  d! - regexp directory mask for NOT include directory to backup.
#
#
# Backup only takes place within the directories and files described in paths.
# Path negations have a higher priority than paths.
# Masks have a higher priority than paths or path negation,
# "NOT" masks have a higher priority than regular masks:
#
#
# Operation priority:
#
#    1.	=!
#    2.	f!
#    3.	f~
#    4.	d!
#    5.	=~
#    6.	d~
#    7.	!
#    8. path
#
#  Example:
#  /usr/home		# Declare /usr/home as an empty path,
#  !/usr/home		# for masks to work.
#  d~public_html
#  /var
#  d!var/log
#  f~netconf\.log.*
#
#  only /usr/home/*/public_html will be added to the archive,
#  and the files in /var/log/var/log/, except for messages, will not.
#  But, /usr/local/home/user/public_html will be added to the
#  archive will not be ! To search by masks only, you need to declare:
#  /
#  !/
#  d~public_html
#  d~cgi-bin
#  d~/etc/
#-------------------

__DATA__
/usr/local/fsbackup
!/usr/local/fsbackup/cache
f!\.core$
f!^core$
f!\.o$
f!\.log$
#d~public_html
#d!/log
#f~netconf\.log.*

# Linux
/usr/src/linux/.config

# BSD
/var/db/pkg
/usr/src/sys/i386/conf

# Users
/home
/root
!/home/ftp
=!\.netscape/cache/
=!\.mozilla/.*/Cache/
=!\.mozilla/.*/NewCache/
=!\.mozilla/.*/News/
f!.*\.avi$
f!.*\.mpeg$
f!.*\.mpg$
f!.*\.mp3$
f!\.~$
f!\.swp$

# System configuration
/etc
/var/cron/tabs
/var/spool/cron
/var/spool/atjobs
/var/spool/atspool
/usr/local/etc

# Installed packages
/usr/local/bin
/usr/local/include
/usr/local/lib
/usr/local/libdata
/usr/local/libexec
/usr/local/sbin
/usr/local/share
/var/ucd-snmp

# Programs from source
/usr/local/apache/bin
/usr/local/apache/conf
/usr/local/apache/cgi-bin
/usr/local/apache/htdocs
/usr/local/apache/libexec
/usr/local/apache/src
/usr/local/www
/usr/local/mysql/bin
/usr/local/mysql/include
/usr/local/mysql/lib
/usr/local/mysql/libexec
/usr/local/mysql/var/mysql
/usr/local/pgsql/bin
/usr/local/pgsql/share
/usr/local/pgsql/lib
/usr/local/pgsql/include
/usr/local/pgsql/data
!/usr/local/pgsql/data/base
!/usr/local/pgsql/data/pg_xlog
!/usr/local/pgsql/data/pg_clog
/usr/local/squid/bin
/usr/local/squid/etc
/usr/local/news/etc
/usr/local/news/bin
/usr/local/news/lib
/usr/local/samba/bin
/usr/local/samba/lib
/usr/local/src
/usr/local/uucp